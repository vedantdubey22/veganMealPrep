{"ast":null,"code":"import axios from'axios';const api=axios.create({baseURL:'http://localhost:8081/api',headers:{'Content-Type':'application/json'}});// Add request interceptor for logging\napi.interceptors.request.use(config=>{console.log('Making request:',{url:config.url,method:config.method,params:config.params,headers:config.headers});return config;});// Add response interceptor for error handling\napi.interceptors.response.use(response=>{console.log('Received response:',{status:response.status,data:response.data});return response;},error=>{if(error.response){// Server responded with error status\nconsole.error('API Error Response:',{status:error.response.status,statusText:error.response.statusText,data:error.response.data,headers:error.response.headers});}else if(error.request){// Request made but no response received\nconsole.error('Network Error - No response received:',error.request);}else{// Error in request setup\nconsole.error('Request Setup Error:',error.message);}return Promise.reject(error);});export const searchFood=async query=>{try{console.log('Searching for food with query:',query);const response=await api.get('/food/search',{params:{query}});console.log('Search response:',response.data);return response.data||[];}catch(error){console.error('Error in searchFood:',error);throw error;}};export const getNutritionInfo=async foodId=>{try{console.log('Getting nutrition info for food ID:',foodId);const response=await api.get(\"/food/nutrition/\".concat(foodId));console.log('Nutrition response:',response.data);return response.data;}catch(error){console.error('Error fetching nutrition data:',error);throw error;}};export const saveMeal=async mealData=>{try{const response=await api.post('/meals',mealData);return response.data;}catch(error){console.error('Error in saveMeal:',error);throw error;}};export const getDailyMeals=async date=>{try{const response=await api.get('/meals/daily',{params:{date}});return response.data;}catch(error){console.error('Error in getDailyMeals:',error);throw error;}};export default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","interceptors","request","use","config","console","log","url","method","params","response","status","data","error","statusText","message","Promise","reject","searchFood","query","get","getNutritionInfo","foodId","concat","saveMeal","mealData","post","getDailyMeals","date"],"sources":["C:/Users/dubey/OneDrive/Desktop/vegan meal prep/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8081/api',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Add request interceptor for logging\r\napi.interceptors.request.use((config) => {\r\n  console.log('Making request:', {\r\n    url: config.url,\r\n    method: config.method,\r\n    params: config.params,\r\n    headers: config.headers,\r\n  });\r\n  return config;\r\n});\r\n\r\n// Add response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('Received response:', {\r\n      status: response.status,\r\n      data: response.data,\r\n    });\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response) {\r\n      // Server responded with error status\r\n      console.error('API Error Response:', {\r\n        status: error.response.status,\r\n        statusText: error.response.statusText,\r\n        data: error.response.data,\r\n        headers: error.response.headers,\r\n      });\r\n    } else if (error.request) {\r\n      // Request made but no response received\r\n      console.error('Network Error - No response received:', error.request);\r\n    } else {\r\n      // Error in request setup\r\n      console.error('Request Setup Error:', error.message);\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const searchFood = async (query) => {\r\n  try {\r\n    console.log('Searching for food with query:', query);\r\n    const response = await api.get('/food/search', {\r\n      params: { query },\r\n    });\r\n    console.log('Search response:', response.data);\r\n    return response.data || [];\r\n  } catch (error) {\r\n    console.error('Error in searchFood:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getNutritionInfo = async (foodId) => {\r\n  try {\r\n    console.log('Getting nutrition info for food ID:', foodId);\r\n    const response = await api.get(`/food/nutrition/${foodId}`);\r\n    console.log('Nutrition response:', response.data);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching nutrition data:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const saveMeal = async (mealData) => {\r\n  try {\r\n    const response = await api.post('/meals', mealData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error in saveMeal:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getDailyMeals = async (date) => {\r\n  try {\r\n    const response = await api.get('/meals/daily', {\r\n      params: { date },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error in getDailyMeals:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}