{"ast":null,"code":"import config from '../config/config';\nconst SYSTEM_PROMPT = `You are a helpful vegan meal assistant. Follow these rules strictly:\n\n1. ONLY suggest 100% vegan ingredients and recipes - no animal products whatsoever\n2. Keep responses SHORT and CONCISE - maximum 3 sentences per response\n3. If suggesting recipes, limit to 1-2 options per response\n4. Focus on whole food plant-based ingredients\n5. If unsure about whether something is vegan, err on the side of caution\n6. Never suggest or mention non-vegan alternatives\n\nYour core functions:\n- Suggest vegan recipes and meal ideas\n- Provide quick nutritional info about vegan ingredients\n- Give brief tips for vegan meal prep\n- Answer vegan nutrition questions concisely\n- Suggest vegan substitutes for non-vegan ingredients\n\nRemember: Keep it brief, keep it vegan!`;\nexport const getChatResponse = async messages => {\n  try {\n    // Combine system prompt with user message\n    const latestMessage = messages[messages.length - 1];\n    const fullPrompt = `${SYSTEM_PROMPT}\\n\\nUser: ${latestMessage.text}`;\n    const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\n?key=${config.GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          role: \"user\",\n          parts: [{\n            text: fullPrompt\n          }]\n        }]\n      })\n    });\n    if (!response.ok) {\n      var _error$error;\n      const error = await response.json();\n      console.error('API Error Response:', error);\n      throw new Error(((_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.message) || 'Failed to get response from AI');\n    }\n    const data = await response.json();\n    console.log('API Response:', data);\n    if (data.candidates && data.candidates[0] && data.candidates[0].content) {\n      return data.candidates[0].content.parts[0].text;\n    } else {\n      throw new Error('Unexpected API response format');\n    }\n  } catch (error) {\n    console.error('Chat API Error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["config","SYSTEM_PROMPT","getChatResponse","messages","latestMessage","length","fullPrompt","text","response","fetch","GEMINI_API_KEY","method","headers","body","JSON","stringify","contents","role","parts","ok","_error$error","error","json","console","Error","message","data","log","candidates","content"],"sources":["C:/Users/dubey/OneDrive/Desktop/vegan meal prep/frontend/src/utils/chatService.js"],"sourcesContent":["import config from '../config/config';\r\n\r\nconst SYSTEM_PROMPT = `You are a helpful vegan meal assistant. Follow these rules strictly:\r\n\r\n1. ONLY suggest 100% vegan ingredients and recipes - no animal products whatsoever\r\n2. Keep responses SHORT and CONCISE - maximum 3 sentences per response\r\n3. If suggesting recipes, limit to 1-2 options per response\r\n4. Focus on whole food plant-based ingredients\r\n5. If unsure about whether something is vegan, err on the side of caution\r\n6. Never suggest or mention non-vegan alternatives\r\n\r\nYour core functions:\r\n- Suggest vegan recipes and meal ideas\r\n- Provide quick nutritional info about vegan ingredients\r\n- Give brief tips for vegan meal prep\r\n- Answer vegan nutrition questions concisely\r\n- Suggest vegan substitutes for non-vegan ingredients\r\n\r\nRemember: Keep it brief, keep it vegan!`;\r\n\r\nexport const getChatResponse = async (messages) => {\r\n    try {\r\n        // Combine system prompt with user message\r\n        const latestMessage = messages[messages.length - 1];\r\n        const fullPrompt = `${SYSTEM_PROMPT}\\n\\nUser: ${latestMessage.text}`;\r\n\r\n        const response = await fetch(`https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent\r\n?key=${config.GEMINI_API_KEY}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                contents: [{\r\n                    role: \"user\",\r\n                    parts: [{\r\n                        text: fullPrompt\r\n                    }]\r\n                }]\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            console.error('API Error Response:', error);\r\n            throw new Error(error.error?.message || 'Failed to get response from AI');\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('API Response:', data);\r\n        \r\n        if (data.candidates && data.candidates[0] && data.candidates[0].content) {\r\n            return data.candidates[0].content.parts[0].text;\r\n        } else {\r\n            throw new Error('Unexpected API response format');\r\n        }\r\n    } catch (error) {\r\n        console.error('Chat API Error:', error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,kBAAkB;AAErC,MAAMC,aAAa,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AAExC,OAAO,MAAMC,eAAe,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAI;IACA;IACA,MAAMC,aAAa,GAAGD,QAAQ,CAACA,QAAQ,CAACE,MAAM,GAAG,CAAC,CAAC;IACnD,MAAMC,UAAU,GAAG,GAAGL,aAAa,aAAaG,aAAa,CAACG,IAAI,EAAE;IAEpE,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC;AACrC,OAAOT,MAAM,CAACU,cAAc,EAAE,EAAE;MACpBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,QAAQ,EAAE,CAAC;UACPC,IAAI,EAAE,MAAM;UACZC,KAAK,EAAE,CAAC;YACJX,IAAI,EAAED;UACV,CAAC;QACL,CAAC;MACL,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACE,QAAQ,CAACW,EAAE,EAAE;MAAA,IAAAC,YAAA;MACd,MAAMC,KAAK,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;MACnCC,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM,IAAIG,KAAK,CAAC,EAAAJ,YAAA,GAAAC,KAAK,CAACA,KAAK,cAAAD,YAAA,uBAAXA,YAAA,CAAaK,OAAO,KAAI,gCAAgC,CAAC;IAC7E;IAEA,MAAMC,IAAI,GAAG,MAAMlB,QAAQ,CAACc,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACI,GAAG,CAAC,eAAe,EAAED,IAAI,CAAC;IAElC,IAAIA,IAAI,CAACE,UAAU,IAAIF,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,IAAIF,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,EAAE;MACrE,OAAOH,IAAI,CAACE,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACX,KAAK,CAAC,CAAC,CAAC,CAACX,IAAI;IACnD,CAAC,MAAM;MACH,MAAM,IAAIiB,KAAK,CAAC,gCAAgC,CAAC;IACrD;EACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZE,OAAO,CAACF,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}