{"ast":null,"code":"import config from '../config/config';\nconst SYSTEM_PROMPT = `You are a helpful vegan meal assistant. You can:\n1. Suggest vegan recipes and meal ideas\n2. Provide nutritional information about vegan ingredients\n3. Offer tips for vegan meal prep and cooking\n4. Answer questions about vegan nutrition and diet\n5. Help with vegan substitutions for non-vegan ingredients\n\nKeep responses concise and friendly. If you're not sure about something, say so.`;\nexport const getChatResponse = async messages => {\n  try {\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${config.OPENAI_API_KEY}`\n      },\n      body: JSON.stringify({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"system\",\n          content: SYSTEM_PROMPT\n        }, ...messages.map(msg => ({\n          role: msg.isBot ? \"assistant\" : \"user\",\n          content: msg.text\n        }))],\n        max_tokens: 500,\n        temperature: 0.7,\n        top_p: 1,\n        frequency_penalty: 0,\n        presence_penalty: 0\n      })\n    });\n    if (!response.ok) {\n      var _error$error;\n      const error = await response.json();\n      console.error('API Error Response:', error);\n      throw new Error(((_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.message) || 'Failed to get response from AI');\n    }\n    const data = await response.json();\n    console.log('API Response:', data);\n    if (data.choices && data.choices[0] && data.choices[0].message) {\n      return data.choices[0].message.content;\n    } else {\n      throw new Error('Unexpected API response format');\n    }\n  } catch (error) {\n    console.error('Chat API Error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["config","SYSTEM_PROMPT","getChatResponse","messages","response","fetch","method","headers","OPENAI_API_KEY","body","JSON","stringify","model","role","content","map","msg","isBot","text","max_tokens","temperature","top_p","frequency_penalty","presence_penalty","ok","_error$error","error","json","console","Error","message","data","log","choices"],"sources":["C:/Users/dubey/OneDrive/Desktop/vegan meal prep/frontend/src/utils/chatService.js"],"sourcesContent":["import config from '../config/config';\r\n\r\nconst SYSTEM_PROMPT = `You are a helpful vegan meal assistant. You can:\r\n1. Suggest vegan recipes and meal ideas\r\n2. Provide nutritional information about vegan ingredients\r\n3. Offer tips for vegan meal prep and cooking\r\n4. Answer questions about vegan nutrition and diet\r\n5. Help with vegan substitutions for non-vegan ingredients\r\n\r\nKeep responses concise and friendly. If you're not sure about something, say so.`;\r\n\r\nexport const getChatResponse = async (messages) => {\r\n    try {\r\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${config.OPENAI_API_KEY}`\r\n            },\r\n            body: JSON.stringify({\r\n                model: \"gpt-3.5-turbo\",\r\n                messages: [\r\n                    {\r\n                        role: \"system\",\r\n                        content: SYSTEM_PROMPT\r\n                    },\r\n                    ...messages.map(msg => ({\r\n                        role: msg.isBot ? \"assistant\" : \"user\",\r\n                        content: msg.text\r\n                    }))\r\n                ],\r\n                max_tokens: 500,\r\n                temperature: 0.7,\r\n                top_p: 1,\r\n                frequency_penalty: 0,\r\n                presence_penalty: 0\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const error = await response.json();\r\n            console.error('API Error Response:', error);\r\n            throw new Error(error.error?.message || 'Failed to get response from AI');\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log('API Response:', data);\r\n        \r\n        if (data.choices && data.choices[0] && data.choices[0].message) {\r\n            return data.choices[0].message.content;\r\n        } else {\r\n            throw new Error('Unexpected API response format');\r\n        }\r\n    } catch (error) {\r\n        console.error('Chat API Error:', error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"AAAA,OAAOA,MAAM,MAAM,kBAAkB;AAErC,MAAMC,aAAa,GAAG;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AAEjF,OAAO,MAAMC,eAAe,GAAG,MAAOC,QAAQ,IAAK;EAC/C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;MACvEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE,UAAUP,MAAM,CAACQ,cAAc;MACpD,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,eAAe;QACtBT,QAAQ,EAAE,CACN;UACIU,IAAI,EAAE,QAAQ;UACdC,OAAO,EAAEb;QACb,CAAC,EACD,GAAGE,QAAQ,CAACY,GAAG,CAACC,GAAG,KAAK;UACpBH,IAAI,EAAEG,GAAG,CAACC,KAAK,GAAG,WAAW,GAAG,MAAM;UACtCH,OAAO,EAAEE,GAAG,CAACE;QACjB,CAAC,CAAC,CAAC,CACN;QACDC,UAAU,EAAE,GAAG;QACfC,WAAW,EAAE,GAAG;QAChBC,KAAK,EAAE,CAAC;QACRC,iBAAiB,EAAE,CAAC;QACpBC,gBAAgB,EAAE;MACtB,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACnB,QAAQ,CAACoB,EAAE,EAAE;MAAA,IAAAC,YAAA;MACd,MAAMC,KAAK,GAAG,MAAMtB,QAAQ,CAACuB,IAAI,CAAC,CAAC;MACnCC,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM,IAAIG,KAAK,CAAC,EAAAJ,YAAA,GAAAC,KAAK,CAACA,KAAK,cAAAD,YAAA,uBAAXA,YAAA,CAAaK,OAAO,KAAI,gCAAgC,CAAC;IAC7E;IAEA,MAAMC,IAAI,GAAG,MAAM3B,QAAQ,CAACuB,IAAI,CAAC,CAAC;IAClCC,OAAO,CAACI,GAAG,CAAC,eAAe,EAAED,IAAI,CAAC;IAElC,IAAIA,IAAI,CAACE,OAAO,IAAIF,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,IAAIF,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACH,OAAO,EAAE;MAC5D,OAAOC,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACH,OAAO,CAAChB,OAAO;IAC1C,CAAC,MAAM;MACH,MAAM,IAAIe,KAAK,CAAC,gCAAgC,CAAC;IACrD;EACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZE,OAAO,CAACF,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;IACvC,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}